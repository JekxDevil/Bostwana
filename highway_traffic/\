#include<bits/stdc++.h>
using namespace std;

struct interval{
	int from;
	int to;
};

int getNumOverlapping(int pos, vector<interval> intervals){
	int count = 0;
	for(interval in : intervals){
		if(in.from <= pos && in.to >= pos) count++;
	}
	return count;
}

void printIntervals(vector<interval> intervals){
	for(interval in : intervals){
		cout << "From: " << in.from << " To: " << in.to << endl;
	}
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
	
	int N;
	cin >> N;
	char type;
	int position;
	vector<interval> intervals;	
	vector<int> points;
	int m=INT_MAX,M=0;
	for(int i=0;i<N;i++){
		cin >> type >> position;
		interval in;
		in.from = position-(type=='T'?100:50);
		in.to = position+(type=='T'?100:50);
		points.push_back(in.from);
		points.push_back(in.to);
		if(in.from < m) m = in.from;
		if(in.to > M) M = in.to;
		intervals.push_back(in);
	}	
	points.push_back(m);
	sort(points.begin(), points.end());

	vector<interval> ovs;
	int start=0,end=0;
	for(int point : points){
		int n_prev = getNumOverlapping(point-1, intervals);
		int n = getNumOverlapping(point, intervals);
		if(n>=3){
			int n_after = getNumOverlapping(point+1, intervals);	
			if(n_prev<3 != n_after<3){
				if(n_after<3){
					end = point;
					interval intv;
					intv.from = start;
					intv.to = end;
					ovs.push_back(intv);
				}
				if(n_prev<3) start=point;
			}
		}
	}

	for(interval intv : ovs) 
		if (intv.from != intv.to)
			cout << intv.from << " " << intv.to << endl;

	return 0;
}

